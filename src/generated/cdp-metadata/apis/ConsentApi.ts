/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Consent,
  ConsentCollection,
  CreateConsent,
} from '../models';
import {
    ConsentFromJSON,
    ConsentToJSON,
    ConsentCollectionFromJSON,
    ConsentCollectionToJSON,
    CreateConsentFromJSON,
    CreateConsentToJSON,
} from '../models';

export interface CreateConsentRequest {
    orgName: string;
    projectName: string;
    createConsent: CreateConsent;
}

export interface DeleteConsentRequest {
    orgName: string;
    projectName: string;
    consentId: string;
}

export interface FetchConsentRequest {
    orgName: string;
    projectName: string;
    consentId: string;
}

export interface FetchConsentsRequest {
    orgName: string;
    projectName: string;
    consentId?: string;
    purpose?: string;
    regulation?: string;
}

/**
 * 
 */
export class ConsentApi extends runtime.BaseAPI {

    /**
     * create a new Consent
     */
    async createConsentRaw(requestParameters: CreateConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Consent>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling createConsent.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createConsent.');
        }

        if (requestParameters.createConsent === null || requestParameters.createConsent === undefined) {
            throw new runtime.RequiredError('createConsent','Required parameter requestParameters.createConsent was null or undefined when calling createConsent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/consents`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConsentToJSON(requestParameters.createConsent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentFromJSON(jsonValue));
    }

    /**
     * create a new Consent
     */
    async createConsent(requestParameters: CreateConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Consent> {
        const response = await this.createConsentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Consent
     */
    async deleteConsentRaw(requestParameters: DeleteConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Consent>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling deleteConsent.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteConsent.');
        }

        if (requestParameters.consentId === null || requestParameters.consentId === undefined) {
            throw new runtime.RequiredError('consentId','Required parameter requestParameters.consentId was null or undefined when calling deleteConsent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/consents/{consentId}`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"consentId"}}`, encodeURIComponent(String(requestParameters.consentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentFromJSON(jsonValue));
    }

    /**
     * delete a Consent
     */
    async deleteConsent(requestParameters: DeleteConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Consent> {
        const response = await this.deleteConsentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * fetchConsent
     */
    async fetchConsentRaw(requestParameters: FetchConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Consent>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling fetchConsent.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling fetchConsent.');
        }

        if (requestParameters.consentId === null || requestParameters.consentId === undefined) {
            throw new runtime.RequiredError('consentId','Required parameter requestParameters.consentId was null or undefined when calling fetchConsent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/consents/{consentId}`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"consentId"}}`, encodeURIComponent(String(requestParameters.consentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentFromJSON(jsonValue));
    }

    /**
     * fetchConsent
     */
    async fetchConsent(requestParameters: FetchConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Consent> {
        const response = await this.fetchConsentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * fetchConsents
     */
    async fetchConsentsRaw(requestParameters: FetchConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsentCollection>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling fetchConsents.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling fetchConsents.');
        }

        const queryParameters: any = {};

        if (requestParameters.consentId !== undefined) {
            queryParameters['consentId'] = requestParameters.consentId;
        }

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        if (requestParameters.regulation !== undefined) {
            queryParameters['regulation'] = requestParameters.regulation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/consents`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentCollectionFromJSON(jsonValue));
    }

    /**
     * fetchConsents
     */
    async fetchConsents(requestParameters: FetchConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsentCollection> {
        const response = await this.fetchConsentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
