/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControlAnalytics } from './ControlAnalytics';
import {
    ControlAnalyticsFromJSON,
    ControlAnalyticsFromJSONTyped,
    ControlAnalyticsToJSON,
} from './ControlAnalytics';
import type { VariantAnalyticsItem } from './VariantAnalyticsItem';
import {
    VariantAnalyticsItemFromJSON,
    VariantAnalyticsItemFromJSONTyped,
    VariantAnalyticsItemToJSON,
} from './VariantAnalyticsItem';

/**
 * 
 * @export
 * @interface ExperimentAnalytics
 */
export interface ExperimentAnalytics {
    /**
     * 
     * @type {ControlAnalytics}
     * @memberof ExperimentAnalytics
     */
    control?: ControlAnalytics;
    /**
     * 
     * @type {Array<VariantAnalyticsItem>}
     * @memberof ExperimentAnalytics
     */
    variants?: Array<VariantAnalyticsItem>;
}

/**
 * Check if a given object implements the ExperimentAnalytics interface.
 */
export function instanceOfExperimentAnalytics(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExperimentAnalyticsFromJSON(json: any): ExperimentAnalytics {
    return ExperimentAnalyticsFromJSONTyped(json, false);
}

export function ExperimentAnalyticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentAnalytics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'control': !exists(json, 'control') ? undefined : ControlAnalyticsFromJSON(json['control']),
        'variants': !exists(json, 'variants') ? undefined : ((json['variants'] as Array<any>).map(VariantAnalyticsItemFromJSON)),
    };
}

export function ExperimentAnalyticsToJSON(value?: ExperimentAnalytics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'control': ControlAnalyticsToJSON(value.control),
        'variants': value.variants === undefined ? undefined : ((value.variants as Array<any>).map(VariantAnalyticsItemToJSON)),
    };
}

