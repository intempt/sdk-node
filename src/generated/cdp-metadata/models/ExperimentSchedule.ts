/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DayOfWeek } from './DayOfWeek';
import {
    DayOfWeekFromJSON,
    DayOfWeekFromJSONTyped,
    DayOfWeekToJSON,
} from './DayOfWeek';
import type { TimeRange } from './TimeRange';
import {
    TimeRangeFromJSON,
    TimeRangeFromJSONTyped,
    TimeRangeToJSON,
} from './TimeRange';

/**
 * 
 * @export
 * @interface ExperimentSchedule
 */
export interface ExperimentSchedule {
    /**
     * A time-zone ID, such as Europe/Paris.
     * 
     * There are three types of ID.
     * The simplest type of ID is that that consists of 'Z' and IDs starting with '+' or '-'.
     * 
     * The next type of ID are offset-style IDs with some form of prefix, such as 'GMT+2' or 'UTC+01:00'.
     * The recognised prefixes are 'UTC', 'GMT' and 'UT'. The offset is the suffix and will be normalized during creation.
     * 
     * The third type of ID are region-based IDs. A region-based ID must be of two or more characters, and not start with 'UTC', 'GMT', 'UT', '+' or '-'. Example: 'Europe/London' or 'America/New_York'.
     * 
     * It is strongly recommended that use the TZDB group names.
     * @type {string}
     * @memberof ExperimentSchedule
     */
    timeZone?: string;
    /**
     * A date-time without an offset, such as '2011-12-03T10:15:30'.
     * The letter 'T' is case insensitive.
     * As defined by date-time - RFC3339
     * @type {string}
     * @memberof ExperimentSchedule
     */
    startDate?: string;
    /**
     * A date-time without an offset, such as '2011-12-03T10:15:30'.
     * The letter 'T' is case insensitive.
     * As defined by date-time - RFC3339
     * @type {string}
     * @memberof ExperimentSchedule
     */
    endDate?: string;
    /**
     * 
     * @type {Array<DayOfWeek>}
     * @memberof ExperimentSchedule
     */
    days?: Array<DayOfWeek>;
    /**
     * 
     * @type {TimeRange}
     * @memberof ExperimentSchedule
     */
    timeRange?: TimeRange;
}

/**
 * Check if a given object implements the ExperimentSchedule interface.
 */
export function instanceOfExperimentSchedule(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExperimentScheduleFromJSON(json: any): ExperimentSchedule {
    return ExperimentScheduleFromJSONTyped(json, false);
}

export function ExperimentScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentSchedule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'days': !exists(json, 'days') ? undefined : ((json['days'] as Array<any>).map(DayOfWeekFromJSON)),
        'timeRange': !exists(json, 'timeRange') ? undefined : TimeRangeFromJSON(json['timeRange']),
    };
}

export function ExperimentScheduleToJSON(value?: ExperimentSchedule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'timeZone': value.timeZone,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'days': value.days === undefined ? undefined : ((value.days as Array<any>).map(DayOfWeekToJSON)),
        'timeRange': TimeRangeToJSON(value.timeRange),
    };
}

