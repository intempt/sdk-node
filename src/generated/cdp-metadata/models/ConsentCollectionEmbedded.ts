/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Consent } from './Consent';
import {
    ConsentFromJSON,
    ConsentFromJSONTyped,
    ConsentToJSON,
} from './Consent';

/**
 * 
 * @export
 * @interface ConsentCollectionEmbedded
 */
export interface ConsentCollectionEmbedded {
    /**
     * 
     * @type {Array<Consent>}
     * @memberof ConsentCollectionEmbedded
     */
    consentList?: Array<Consent>;
}

/**
 * Check if a given object implements the ConsentCollectionEmbedded interface.
 */
export function instanceOfConsentCollectionEmbedded(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConsentCollectionEmbeddedFromJSON(json: any): ConsentCollectionEmbedded {
    return ConsentCollectionEmbeddedFromJSONTyped(json, false);
}

export function ConsentCollectionEmbeddedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsentCollectionEmbedded {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'consentList': !exists(json, 'consentList') ? undefined : ((json['consentList'] as Array<any>).map(ConsentFromJSON)),
    };
}

export function ConsentCollectionEmbeddedToJSON(value?: ConsentCollectionEmbedded | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'consentList': value.consentList === undefined ? undefined : ((value.consentList as Array<any>).map(ConsentToJSON)),
    };
}

