/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExperimentFrequency } from './ExperimentFrequency';
import {
    ExperimentFrequencyFromJSON,
    ExperimentFrequencyFromJSONTyped,
    ExperimentFrequencyToJSON,
} from './ExperimentFrequency';
import type { ExperimentHypothesisTest } from './ExperimentHypothesisTest';
import {
    ExperimentHypothesisTestFromJSON,
    ExperimentHypothesisTestFromJSONTyped,
    ExperimentHypothesisTestToJSON,
} from './ExperimentHypothesisTest';
import type { ExperimentSchedule } from './ExperimentSchedule';
import {
    ExperimentScheduleFromJSON,
    ExperimentScheduleFromJSONTyped,
    ExperimentScheduleToJSON,
} from './ExperimentSchedule';
import type { ExperimentStatus } from './ExperimentStatus';
import {
    ExperimentStatusFromJSON,
    ExperimentStatusFromJSONTyped,
    ExperimentStatusToJSON,
} from './ExperimentStatus';
import type { ExperimentType } from './ExperimentType';
import {
    ExperimentTypeFromJSON,
    ExperimentTypeFromJSONTyped,
    ExperimentTypeToJSON,
} from './ExperimentType';

/**
 * ### Defaults
 * - description: empty
 * - frequency: ALWAYS
 * - status: DRAFT
 * @export
 * @interface CreateExperiment
 */
export interface CreateExperiment {
    /**
     * a human readable title of the entity
     * @type {string}
     * @memberof CreateExperiment
     */
    title: string;
    /**
     * 
     * @type {ExperimentType}
     * @memberof CreateExperiment
     */
    type: ExperimentType;
    /**
     * 
     * @type {ExperimentStatus}
     * @memberof CreateExperiment
     */
    status?: ExperimentStatus;
    /**
     * 
     * @type {ExperimentSchedule}
     * @memberof CreateExperiment
     */
    schedule?: ExperimentSchedule;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateExperiment
     */
    showOn?: Array<string>;
    /**
     * 
     * @type {ExperimentFrequency}
     * @memberof CreateExperiment
     */
    frequency?: ExperimentFrequency;
    /**
     * 
     * @type {ExperimentHypothesisTest}
     * @memberof CreateExperiment
     */
    hypothesisTest?: ExperimentHypothesisTest;
    /**
     * SegmentFilter
     * @type {any}
     * @memberof CreateExperiment
     */
    targetAudience?: any | null;
    /**
     * numeric id of a segment as a string, uniqe within a project
     * @type {string}
     * @memberof CreateExperiment
     */
    conversionGoal?: string;
}

/**
 * Check if a given object implements the CreateExperiment interface.
 */
export function instanceOfCreateExperiment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CreateExperimentFromJSON(json: any): CreateExperiment {
    return CreateExperimentFromJSONTyped(json, false);
}

export function CreateExperimentFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateExperiment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'type': ExperimentTypeFromJSON(json['type']),
        'status': !exists(json, 'status') ? undefined : ExperimentStatusFromJSON(json['status']),
        'schedule': !exists(json, 'schedule') ? undefined : ExperimentScheduleFromJSON(json['schedule']),
        'showOn': !exists(json, 'showOn') ? undefined : json['showOn'],
        'frequency': !exists(json, 'frequency') ? undefined : ExperimentFrequencyFromJSON(json['frequency']),
        'hypothesisTest': !exists(json, 'hypothesisTest') ? undefined : ExperimentHypothesisTestFromJSON(json['hypothesisTest']),
        'targetAudience': !exists(json, 'targetAudience') ? undefined : json['targetAudience'],
        'conversionGoal': !exists(json, 'conversionGoal') ? undefined : json['conversionGoal'],
    };
}

export function CreateExperimentToJSON(value?: CreateExperiment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'type': ExperimentTypeToJSON(value.type),
        'status': ExperimentStatusToJSON(value.status),
        'schedule': ExperimentScheduleToJSON(value.schedule),
        'showOn': value.showOn,
        'frequency': ExperimentFrequencyToJSON(value.frequency),
        'hypothesisTest': ExperimentHypothesisTestToJSON(value.hypothesisTest),
        'targetAudience': value.targetAudience,
        'conversionGoal': value.conversionGoal,
    };
}

