/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControlAnalyticsChartDataInner } from './ControlAnalyticsChartDataInner';
import {
    ControlAnalyticsChartDataInnerFromJSON,
    ControlAnalyticsChartDataInnerFromJSONTyped,
    ControlAnalyticsChartDataInnerToJSON,
} from './ControlAnalyticsChartDataInner';

/**
 * 
 * @export
 * @interface ControlAnalytics
 */
export interface ControlAnalytics {
    /**
     * The measures the number and % of customers that viewed the experience.
     * @type {number}
     * @memberof ControlAnalytics
     */
    reach: number;
    /**
     * The measures the number and % of customers that viewed the experience.
     * @type {number}
     * @memberof ControlAnalytics
     */
    reachRate: number;
    /**
     * the number of users that completed the goal
     * @type {number}
     * @memberof ControlAnalytics
     */
    conversion: number;
    /**
     * the % of users that completed the goal set in the settings section.
     * @type {number}
     * @memberof ControlAnalytics
     */
    conversionRate: number;
    /**
     * 
     * @type {Array<ControlAnalyticsChartDataInner>}
     * @memberof ControlAnalytics
     */
    chartData?: Array<ControlAnalyticsChartDataInner>;
}

/**
 * Check if a given object implements the ControlAnalytics interface.
 */
export function instanceOfControlAnalytics(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "reach" in value;
    isInstance = isInstance && "reachRate" in value;
    isInstance = isInstance && "conversion" in value;
    isInstance = isInstance && "conversionRate" in value;

    return isInstance;
}

export function ControlAnalyticsFromJSON(json: any): ControlAnalytics {
    return ControlAnalyticsFromJSONTyped(json, false);
}

export function ControlAnalyticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControlAnalytics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reach': json['reach'],
        'reachRate': json['reachRate'],
        'conversion': json['conversion'],
        'conversionRate': json['conversionRate'],
        'chartData': !exists(json, 'chartData') ? undefined : ((json['chartData'] as Array<any>).map(ControlAnalyticsChartDataInnerFromJSON)),
    };
}

export function ControlAnalyticsToJSON(value?: ControlAnalytics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reach': value.reach,
        'reachRate': value.reachRate,
        'conversion': value.conversion,
        'conversionRate': value.conversionRate,
        'chartData': value.chartData === undefined ? undefined : ((value.chartData as Array<any>).map(ControlAnalyticsChartDataInnerToJSON)),
    };
}

