/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExperimentFrequency } from './ExperimentFrequency';
import {
    ExperimentFrequencyFromJSON,
    ExperimentFrequencyFromJSONTyped,
    ExperimentFrequencyToJSON,
} from './ExperimentFrequency';
import type { ExperimentHypothesisTest } from './ExperimentHypothesisTest';
import {
    ExperimentHypothesisTestFromJSON,
    ExperimentHypothesisTestFromJSONTyped,
    ExperimentHypothesisTestToJSON,
} from './ExperimentHypothesisTest';
import type { ExperimentSchedule } from './ExperimentSchedule';
import {
    ExperimentScheduleFromJSON,
    ExperimentScheduleFromJSONTyped,
    ExperimentScheduleToJSON,
} from './ExperimentSchedule';
import type { ExperimentStatus } from './ExperimentStatus';
import {
    ExperimentStatusFromJSON,
    ExperimentStatusFromJSONTyped,
    ExperimentStatusToJSON,
} from './ExperimentStatus';
import type { ExperimentType } from './ExperimentType';
import {
    ExperimentTypeFromJSON,
    ExperimentTypeFromJSONTyped,
    ExperimentTypeToJSON,
} from './ExperimentType';
import type { Variant } from './Variant';
import {
    VariantFromJSON,
    VariantFromJSONTyped,
    VariantToJSON,
} from './Variant';

/**
 * {
 *   "id": "3e49b7ea-20ab-4dc8-b19f-7b5848c82bc0",
 *   "name": "my-first-experiment",
 *   "title": "My first experiment",
 *   "status": ON,
 *   "type": "CLIENT_SIDE",
 *   {
 *     "timeZone": "Asia/Shanghai",
 *     "startDate": "2022-01-03T08:30",
 *     "endDate": "2022-04-01T00:00",
 *     "timeWindow": {
 *       "startTime": "00:00",
 *       "endTime": "23:00",
 *     }
 *   },
 *   "showOn": [
 *     "http://webshop.com/home",
 *     "http://webshop.com/products",
 *     "https://localhost:8080",
 *     "https://webshop.com/home",
 *     "https://webshop.com/products"
 *   ],
 *   "createdAt": "2022-12-30T08:30:00Z",
 *   "createdBy": 347,
 *   "updatedAt": "2022-12-30T08:35:00Z",
 *   "updatedBy": 347,
 *   "hypothesisTest": {
 *     "title": "hyp",
 *     "confidenceLevel":99
 *   },
 *   "variants": [
 *     {
 *       "id": "87c8c606-f63a-4480-a10f-bcf22a5977d3",
 *       "name": "blue-image",
 *       "title": "Blue image",
 *       "trafficDistribution": 40,
 *       "changes": {
 *         "backgroundColor": "blue"
 *       }
 *     },
 *     {
 *       "id": "f741a347-8864-4ef0-81a6-13e8d04bad3e",
 *       "name": "red-image",
 *       "title": "Red image",
 *       "trafficDistribution": 40,
 *       "changes": {
 *         "backgroundColor": "red"
 *       }
 *     }
 *   ]
 * }
 * @export
 * @interface Experiment
 */
export interface Experiment {
    /**
     * universally unique identifier (UUID)
     * @type {string}
     * @memberof Experiment
     */
    id: string;
    /**
     * a slugified version of title; calculated during title change.
     * @type {string}
     * @memberof Experiment
     */
    name: string;
    /**
     * a human readable title of the entity
     * @type {string}
     * @memberof Experiment
     */
    title: string;
    /**
     * 
     * @type {ExperimentType}
     * @memberof Experiment
     */
    type: ExperimentType;
    /**
     * 
     * @type {ExperimentStatus}
     * @memberof Experiment
     */
    status: ExperimentStatus;
    /**
     * 
     * @type {ExperimentSchedule}
     * @memberof Experiment
     */
    schedule: ExperimentSchedule;
    /**
     * 
     * @type {Array<string>}
     * @memberof Experiment
     */
    showOn: Array<string>;
    /**
     * 
     * @type {ExperimentFrequency}
     * @memberof Experiment
     */
    frequency: ExperimentFrequency;
    /**
     * 
     * @type {ExperimentHypothesisTest}
     * @memberof Experiment
     */
    hypothesisTest?: ExperimentHypothesisTest;
    /**
     * SegmentFilter
     * @type {any}
     * @memberof Experiment
     */
    targetAudience?: any | null;
    /**
     * numeric id of a segment as a string, uniqe within a project
     * @type {string}
     * @memberof Experiment
     */
    conversionGoal?: string;
    /**
     * 
     * @type {Array<Variant>}
     * @memberof Experiment
     */
    variants: Array<Variant>;
    /**
     * A date-time with an offset, such as '2011-12-03T10:15:30+01:00' or '2021-01-30T08:30:00Z'.
     * As defined by date-time - RFC3339
     * @type {Date}
     * @memberof Experiment
     */
    createdAt: Date;
    /**
     * person numeric unique id
     * @type {string}
     * @memberof Experiment
     */
    createdBy: string;
    /**
     * A date-time with an offset, such as '2011-12-03T10:15:30+01:00' or '2021-01-30T08:30:00Z'.
     * As defined by date-time - RFC3339
     * @type {Date}
     * @memberof Experiment
     */
    updatedAt: Date;
    /**
     * person numeric unique id
     * @type {string}
     * @memberof Experiment
     */
    updatedBy: string;
}

/**
 * Check if a given object implements the Experiment interface.
 */
export function instanceOfExperiment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "schedule" in value;
    isInstance = isInstance && "showOn" in value;
    isInstance = isInstance && "frequency" in value;
    isInstance = isInstance && "variants" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "updatedBy" in value;

    return isInstance;
}

export function ExperimentFromJSON(json: any): Experiment {
    return ExperimentFromJSONTyped(json, false);
}

export function ExperimentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Experiment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'title': json['title'],
        'type': ExperimentTypeFromJSON(json['type']),
        'status': ExperimentStatusFromJSON(json['status']),
        'schedule': ExperimentScheduleFromJSON(json['schedule']),
        'showOn': json['showOn'],
        'frequency': ExperimentFrequencyFromJSON(json['frequency']),
        'hypothesisTest': !exists(json, 'hypothesisTest') ? undefined : ExperimentHypothesisTestFromJSON(json['hypothesisTest']),
        'targetAudience': !exists(json, 'targetAudience') ? undefined : json['targetAudience'],
        'conversionGoal': !exists(json, 'conversionGoal') ? undefined : json['conversionGoal'],
        'variants': ((json['variants'] as Array<any>).map(VariantFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'updatedAt': (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'],
    };
}

export function ExperimentToJSON(value?: Experiment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'title': value.title,
        'type': ExperimentTypeToJSON(value.type),
        'status': ExperimentStatusToJSON(value.status),
        'schedule': ExperimentScheduleToJSON(value.schedule),
        'showOn': value.showOn,
        'frequency': ExperimentFrequencyToJSON(value.frequency),
        'hypothesisTest': ExperimentHypothesisTestToJSON(value.hypothesisTest),
        'targetAudience': value.targetAudience,
        'conversionGoal': value.conversionGoal,
        'variants': ((value.variants as Array<any>).map(VariantToJSON)),
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'updatedAt': (value.updatedAt.toISOString()),
        'updatedBy': value.updatedBy,
    };
}

