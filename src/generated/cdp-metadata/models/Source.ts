/* tslint:disable */
/* eslint-disable */
/**
 * cdp-metadata
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    id?: string;
    /**
     * a slugified version of title; calculated during title change.
     * @type {string}
     * @memberof Source
     */
    name?: string;
    /**
     * a human readable title of the entity
     * @type {string}
     * @memberof Source
     */
    title?: string;
    /**
     * a human description of the entity
     * @type {string}
     * @memberof Source
     */
    description?: string;
    /**
     * possible values
     * 
     * - api
     * - ?
     * @type {string}
     * @memberof Source
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    integrationId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Source
     */
    active?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Source
     */
    createdAt?: Date;
    /**
     * person numeric unique id
     * @type {string}
     * @memberof Source
     */
    createdBy?: string;
}

/**
 * Check if a given object implements the Source interface.
 */
export function instanceOfSource(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SourceFromJSON(json: any): Source {
    return SourceFromJSONTyped(json, false);
}

export function SourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Source {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'integrationId': !exists(json, 'integrationId') ? undefined : json['integrationId'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
    };
}

export function SourceToJSON(value?: Source | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'title': value.title,
        'description': value.description,
        'type': value.type,
        'integrationId': value.integrationId,
        'active': value.active,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
    };
}

