/* tslint:disable */
/* eslint-disable */
/**
 * metric
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGrowthBoard,
  GrowthBoard,
  GrowthBoardCollection,
} from '../models';
import {
    CreateGrowthBoardFromJSON,
    CreateGrowthBoardToJSON,
    GrowthBoardFromJSON,
    GrowthBoardToJSON,
    GrowthBoardCollectionFromJSON,
    GrowthBoardCollectionToJSON,
} from '../models';

export interface CreateGrowthBoardRequest {
    orgName: string;
    projectName: string;
    createGrowthBoard: CreateGrowthBoard;
}

export interface DeleteGrowthBoardByIdRequest {
    orgName: string;
    projectName: string;
    growthBoardId: string;
}

export interface FetchGrowthBoardByIdRequest {
    orgName: string;
    projectName: string;
    growthBoardId: string;
}

export interface FetchGrowthBoardsRequest {
    orgName: string;
    projectName: string;
}

export interface UpdateGrowthBoardByIdRequest {
    orgName: string;
    projectName: string;
    growthBoardId: string;
    growthBoard: GrowthBoard;
}

/**
 * 
 */
export class GrowthBoardsApi extends runtime.BaseAPI {

    /**
     * Create new growth-board
     */
    async createGrowthBoardRaw(requestParameters: CreateGrowthBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GrowthBoard>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling createGrowthBoard.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createGrowthBoard.');
        }

        if (requestParameters.createGrowthBoard === null || requestParameters.createGrowthBoard === undefined) {
            throw new runtime.RequiredError('createGrowthBoard','Required parameter requestParameters.createGrowthBoard was null or undefined when calling createGrowthBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/growth-boards`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGrowthBoardToJSON(requestParameters.createGrowthBoard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrowthBoardFromJSON(jsonValue));
    }

    /**
     * Create new growth-board
     */
    async createGrowthBoard(requestParameters: CreateGrowthBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GrowthBoard> {
        const response = await this.createGrowthBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete growth-board by id
     */
    async deleteGrowthBoardByIdRaw(requestParameters: DeleteGrowthBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GrowthBoard>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling deleteGrowthBoardById.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteGrowthBoardById.');
        }

        if (requestParameters.growthBoardId === null || requestParameters.growthBoardId === undefined) {
            throw new runtime.RequiredError('growthBoardId','Required parameter requestParameters.growthBoardId was null or undefined when calling deleteGrowthBoardById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/growth-boards/{growthBoardId}`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"growthBoardId"}}`, encodeURIComponent(String(requestParameters.growthBoardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrowthBoardFromJSON(jsonValue));
    }

    /**
     * Delete growth-board by id
     */
    async deleteGrowthBoardById(requestParameters: DeleteGrowthBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GrowthBoard> {
        const response = await this.deleteGrowthBoardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get growth board by id
     */
    async fetchGrowthBoardByIdRaw(requestParameters: FetchGrowthBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GrowthBoard>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling fetchGrowthBoardById.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling fetchGrowthBoardById.');
        }

        if (requestParameters.growthBoardId === null || requestParameters.growthBoardId === undefined) {
            throw new runtime.RequiredError('growthBoardId','Required parameter requestParameters.growthBoardId was null or undefined when calling fetchGrowthBoardById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/growth-boards/{growthBoardId}`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"growthBoardId"}}`, encodeURIComponent(String(requestParameters.growthBoardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrowthBoardFromJSON(jsonValue));
    }

    /**
     * Get growth board by id
     */
    async fetchGrowthBoardById(requestParameters: FetchGrowthBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GrowthBoard> {
        const response = await this.fetchGrowthBoardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The list of growth-boards
     */
    async fetchGrowthBoardsRaw(requestParameters: FetchGrowthBoardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GrowthBoardCollection>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling fetchGrowthBoards.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling fetchGrowthBoards.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/growth-boards`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrowthBoardCollectionFromJSON(jsonValue));
    }

    /**
     * The list of growth-boards
     */
    async fetchGrowthBoards(requestParameters: FetchGrowthBoardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GrowthBoardCollection> {
        const response = await this.fetchGrowthBoardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update growth-board by id
     */
    async updateGrowthBoardByIdRaw(requestParameters: UpdateGrowthBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateGrowthBoard>> {
        if (requestParameters.orgName === null || requestParameters.orgName === undefined) {
            throw new runtime.RequiredError('orgName','Required parameter requestParameters.orgName was null or undefined when calling updateGrowthBoardById.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updateGrowthBoardById.');
        }

        if (requestParameters.growthBoardId === null || requestParameters.growthBoardId === undefined) {
            throw new runtime.RequiredError('growthBoardId','Required parameter requestParameters.growthBoardId was null or undefined when calling updateGrowthBoardById.');
        }

        if (requestParameters.growthBoard === null || requestParameters.growthBoard === undefined) {
            throw new runtime.RequiredError('growthBoard','Required parameter requestParameters.growthBoard was null or undefined when calling updateGrowthBoardById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth0", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{orgName}/projects/{projectName}/growth-boards/{growthBoardId}`.replace(`{${"orgName"}}`, encodeURIComponent(String(requestParameters.orgName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"growthBoardId"}}`, encodeURIComponent(String(requestParameters.growthBoardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GrowthBoardToJSON(requestParameters.growthBoard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateGrowthBoardFromJSON(jsonValue));
    }

    /**
     * Update growth-board by id
     */
    async updateGrowthBoardById(requestParameters: UpdateGrowthBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateGrowthBoard> {
        const response = await this.updateGrowthBoardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
